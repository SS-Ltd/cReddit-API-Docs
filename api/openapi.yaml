openapi: 3.0.3
info:
  title: cReddit
  description: Reddit Clone Project for CMPS203 Software Engineering Course
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/cReddit/cReddit/1.0.0
    description: SwaggerHub API Auto Mocking
tags:
  - name: user
    description: User Management
  - name: post
    description: Post/Comments Management
  - name: comment
    description: Comments Management
  - name: subreddit
    description: Community Management
  - name: notification
    description: Notifications Management
  - name: mod
    description: Moderation
  - name: search
    description: Search
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user (Signup)
      description: Register a new user or restore a previous deleted one.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              example:
                message: User created successfully
                username: theUser
                displayName: theUser
                about: Hello to my page
                email: john@email.com
                profilePicture: drive.creddit.com/pfp
                banner: drive.creddit.com/pfp
                followers: 100
                cakeDay: "2024-03-25T15:37:33.339+00:00"
                isNSFW: "false"
                allowFollow: "true"
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                UsernamePasswordEmailGenderRequired:
                  value:
                    message: Username, password, email, and gender are required
                UsernameOrEmailAlreadyExist:
                  value:
                    message: Username or email already exists
                InvalidEmail:
                  value:
                    message: Invalid email
                InvalidGender:
                  value:
                    message: Invalid gender
                PasswordMinimumLength:
                  value:
                    message: Password must contain at least one lower and upper case letters and at least one digit and must be at least 8 characters
                ErrorCreatingUser:
                  value:
                    message: Error creating user
    get:
      tags:
        - user
      summary: Get user data
      security:
        - cookie_auth: []
      description: Retrieve information about logged-in user.
      operationId: getUser
      responses:
        "200":
          description: User data retrieved successfully
          content:
            application/json:
              example:
                username: theUser
                displayName: theUser
                about: Hello to my page
                email: john@email.com
                profilePicture: drive.creddit.com/pfp
                banner: drive.creddit.com/pfp
                followers: 100
                cakeDay: "2024-03-25T15:37:33.339+00:00"
                isNSFW: "false"
                allowFollow: "true"
        "401":
          description: "Unauthorized, user must be logged in"
          content:
            application/json:
              example:
                message: Unauthorized, user must be logged in
        "404":
          description: User not found
          content:
            application/json:
              example:
                message: User not found
    delete:
      tags:
        - user
      summary: Delete a user
      description: Soft deletion of user account.
      operationId: deleteUser
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              example:
                message: User deleted successfully
        "404":
          description: User not found
          content:
            application/json:
              example:
                message: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error deleting user
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: Log in with username and password.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              example:
                message: User logged in successfully
                username: theUser
                displayName: theUser
                about: Hello to my page
                email: john@email.com
                profilePicture: drive.creddit.com/pfp
                banner: drive.creddit.com/pfp
                followers: 100
                cakeDay: "2024-03-25T15:37:33.339+00:00"
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                UsernamePasswordRequired:
                  value:
                    message: Username and password are required
                InvalidUsername:
                  value:
                    message: Invalid username
                InvalidPassword:
                  value:
                    message: Invalid password
                ErrorLoggingUser:
                  value:
                    message: Error logging in
  /user/auth/google:
    post:
      tags:
        - user
      summary: Logs user into the system using Google services
      description: Log in with Google OAuth token. If no user exists with the same google ID, a new user is created
      operationId: loginGoogle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginGoogle"
        required: true
      responses:
        "200":
          description: Found a user with the Google ID and logged them in
          content:
            application/json:
              example:
                message: User logged in successfully
                username: theUser
                displayName: theUser
                about: Hello to my page
                email: john@email.com
                profilePicture: drive.creddit.com/pfp
                banner: drive.creddit.com/pfp
                followers: 100
                cakeDay: "2024-03-25T15:37:33.339+00:00"
        "201":
          description: Created new user since no user with the same google ID exists
          content:
            application/json:
              example:
                message: User created successfully
                username: theUser
                displayName: theUser
                about: Hello to my page
                email: john@email.com
                profilePicture: drive.creddit.com/pfp
                banner: drive.creddit.com/pfp
                followers: 100
                cakeDay: "2024-03-25T15:37:33.339+00:00"
        "400":
          description: Error creating user
          content:
            application/json:
              example:
                message: Error creating user
        "401":
          description: Invalid Google access token
          content:
            application/json:
              example:
                message: Invalid token
      x-swagger-router-controller: User
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: Delete user tokens by setting the cookies expiration date to the past
      security:
        - cookie_auth: []
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Logout"
        required: false
      responses:
        "200":
          description: User logged out successfully
          content:
            application/json:
              example:
                message: User logged out successfully
        "400":
          description: Error logging out
  /user/refresh-token:
    get:
      tags:
        - user
      summary: Refreshes the user token
      description: Generates a new access token and returns it in an HTTPONLY cookie if the refresh token is valid
      security:
        - cookie_auth: []
      operationId: refresh
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              example:
                message: "Token refreshed successfully"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              example:
                message: "Unauthorized"
        "404":
          description: "Invalid credentials"
          content:
            application/json:
              example:
                message: "User not found"
        "500":
          description: Internal Server Error
  /user/verify/{token}:
    get:
      tags:
        - user
      summary: Email Verification
      description: Verify user email
      operationId: verifyUser
      parameters:
        - name: token
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User verified successfully
          content:
            application/json:
              example:
                message: User verified successfully
        "400":
          description: "Error verifying user"
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user data
      description: Retrieve information about a specific user.
      operationId: getUserView
      parameters:
        - name: username
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User data retrieved successfully
          content:
            application/json:
              example:
                username: theUser
                displayName: theUser
                about: Hello to my page
                email: john@email.com
                profilePicture: drive.creddit.com/pfp
                banner: drive.creddit.com/pfp
                followers: 100
                cakeDay: "2024-03-25T15:37:33.339+00:00"
                isFollowed: "false"
                isBlocked: "false"
        "401":
          description: "Unauthorized, user must be logged in"
          content:
            application/json:
              example:
                message: Unauthorized, user must be logged in
        "404":
          description: User not found
          content:
            application/json:
              example:
                message: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Internal Server Error
      x-swagger-router-controller: User
  /user/upvoted:
    get:
      tags:
        - user
      summary: Get user upvoted posts
      security:
        - cookie_auth: []
      description: Retrieve paginated user's upvoted posts using the almighty getPosts aggregation pipeline (sorted by the time of upvote).
      operationId: getUpvotedPosts
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: User upvoted posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "400":
          description: Error getting upvoted posts
        "401":
          description: "Unauthorized, user must be logged in"
        "404":
          description: User not found
      x-swagger-router-controller: User
  /user/downvoted:
    get:
      tags:
        - user
      summary: Get user downvoted posts
      description: Retrieve user's downvoted posts using the almighty getPosts aggregation pipeline (sorted by the time of downvote).
      operationId: getDownvotedPosts
      security:
        - cookie_auth: []
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: User downvotes retreived successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "401":
          description: "Unauthorized, user must be logged in"
        "404":
          description: User not found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: User
  /user/settings:
    get:
      tags:
        - user
      summary: Get user settings
      security:
        - cookie_auth: []
      description: Retrieve logged-in user settings
      operationId: getUserSettings
      responses:
        "200":
          description: User settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
        "400":
          description: Error updating user settings
        "401":
          description: Unauthorized, user must be logged in
        "404":
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
        - user
      summary: Edit user settings
      security:
        - cookie_auth: []
      description: Update user settings by including the changed field in the request body.
      operationId: editUserSettings
      requestBody:
        description: User settings object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserSettings"
        required: true
      responses:
        "200":
          description: User settings updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
        "401":
          description: "Unauthorized, user must be logged in"
        "500":
          description: Internal Server Error
      x-swagger-router-controller: User
  /user/forgot-password:
    post:
      tags:
        - user
      summary: Send an email to the user to reset password
      operationId: forgotPassword
      requestBody:
        description: Send reset link Need username or email
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPassword"
        required: true
      responses:
        "200":
          description: Password reset email sent successfully
          content:
            application/json:
              example:
                message: Password reset email sent successfully
        "400":
          description: Username or Email is required
          content:
            application/json:
              example:
                message: Username or Email is required
        "404":
          description: Username or Email not found
          content:
            application/json:
              example:
                message: Username or Email not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: There was an error sending the email. Try again later
      x-swagger-router-controller: User
  /user/change-password:
    patch:
      tags:
        - user
      summary: Change password for the user when he is logged in
      security:
        - cookie_auth: []
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
        required: true
      responses:
        "200":
          description: Password has been changed successfully
          content:
            application/json:
              example:
                message: Password changed successfully
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                OldPassword-NewPassword-ConfirmPasswordRequired:
                  value:
                    message: Old password, new password and confirm password are required
                Incorrect old password:
                  value:
                    message: Old password is incorrect
                PasswordMismatch:
                  value:
                    message: Passwords do not match
                PasswordRequirments:
                  value:
                    message: Password must contain at least one lower and upper case letters and at least one digit and must be at least 8 characters
        "500":
          description: Internal Server Error
      x-swagger-router-controller: User
  /user/reset-password/{token}:
    patch:
      tags:
        - user
      summary: Take user's new password providing the token created from forgot-password
      operationId: resetPassword
      requestBody:
        description: Send reset link
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPassword"
        required: true
      parameters:
        - name: token
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Password reset email sent successfully
          content:
            application/json:
              example:
                message: Password reset email sent successfully
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                Token-Password-ConfirmPasswordRequired:
                  value:
                    message: Token, password, and confirm password are required
                TokenExpired:
                  value:
                    message: Token has expired
                InvalidToken:
                  value:
                    message: Token is invalid
                PasswordMismatch:
                  value:
                    message: Passwords do not match
                PasswordRequirments:
                  value:
                    message: Password must contain at least one lower and upper case letters and at least one digit and must be at least 8 characters
        "500":
          description: Internal Server Error
      x-swagger-router-controller: User
  /user/forgot-username:
    post:
      tags:
        - user
      summary: Send an email to the user to remind user of username
      operationId: forgotUsername
      requestBody:
        description: Send username in an email
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotUsername"
        required: true
      responses:
        "200":
          description: Username reminder email sent successfully
          content:
            application/json:
              example:
                message: Username reminder email sent successfully
        "400":
          description: Email is required
          content:
            application/json:
              example:
                message: Email is required
        "404":
          description: Email not found
          content:
            application/json:
              example:
                message: Email not found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: User
  /user/change-email:
    patch:
      tags:
        - user
      summary: Allows user to change email
      description: Change user email address.
      operationId: changeEmail
      security:
        - cookie_auth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeEmail"
        required: true
      responses:
        "200":
          description: Email has been changed successfully
          content:
            application/json:
              example:
                message: Email changed successfully
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                Password-NewEmailRequired:
                  value:
                    message: Password and new email are required
                IncorrectPassword:
                  value:
                    message: Password is incorrect
                InvalidEmail:
                  value:
                    message: Email is invalid

        "500":
          description: Internal Server Error
      x-swagger-router-controller: User
  /user/block/{username}:
    post:
      tags:
        - user
      summary: Block User
      security:
        - cookie_auth: []
      description: Block a specific user.
      operationId: block
      parameters:
        - name: username
          in: path
          description: Username of the user to block
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User blocked successfully
          content:
            application/json:
              example:
                message: User blocked
        "400":
          description: Bad requests for blocking user
          content:
            application/json:
              examples:
                UsernameIsRequired:
                  value:
                    message: Username is required
                UserCannotBlockThemselves:
                  value:
                    message: User cannot block themselves
                UserAlreadyBlocksUser:
                  value:
                    message: User already blocks the user
        "404":
          description: For nonexistent user
          content:
            application/json:
              examples:
                UserDoesNotExist:
                  value:
                    message: User does not exist
                UserToBeBlockedDoesNotExist:
                  value:
                    message: User to be blocked does not exist
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while blocking the user
      x-swagger-router-controller: User
    delete:
      tags:
        - user
      summary: Unblock user
      description: Unblock a specific user.
      operationId: unblock
      parameters:
        - name: username
          in: path
          description: Username of the user to unblock
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User unblocked successfully
          content:
            application/json:
              example:
                message: User unblocked
        "400":
          description: Bad requests for unblocking user
          content:
            application/json:
              examples:
                UsernameIsRequired:
                  value:
                    message: Username is required
                UserCannotUnblockThemselves:
                  value:
                    message: User cannot unblock themselves
        "404":
          description: For nonexistent user
          content:
            application/json:
              examples:
                UserDoesNotExist:
                  value:
                    message: User does not exist
                UserToBeUnblockedDoesNotExist:
                  value:
                    message: User to be unblocked does not exist
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while unblocking the user
      x-swagger-router-controller: User
  /user/follow/{username}:
    post:
      tags:
        - user
      summary: Follow User
      description: Follow a specific user.
      operationId: follow
      security:
        - cookie_auth: []
      parameters:
        - name: username
          in: path
          description: Username of the user to follow
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User followed successfully
          content:
            application/json:
              example:
                message: User followed
        "400":
          description: Bad requests for blocking user
          content:
            application/json:
              examples:
                UsernameIsRequired:
                  value:
                    message: Username is required
                UserCannotFollowThemselves:
                  value:
                    message: User cannot follow themselves
                UserAlreadyFollowsUser:
                  value:
                    message: User already follows the user
                UserAlreadyBeingFollowedByUser:
                  value:
                    message: User already is being followed by the user
        "404":
          description: For nonexistent user
          content:
            application/json:
              examples:
                UserDoesNotExist:
                  value:
                    message: User does not exist
                UserToBeFollowedDoesNotExist:
                  value:
                    message: User to be followed does not exist
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while following the user
      x-swagger-router-controller: User
    delete:
      tags:
        - user
      summary: Unfollow
      operationId: unfollow
      parameters:
        - name: username
          in: path
          description: Username of the user to unfollow
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User unfollowed successfully
          content:
            application/json:
              example:
                message: User unfollowed
        "400":
          description: Bad requests for blocking user
          content:
            application/json:
              examples:
                UsernameIsRequired:
                  value:
                    message: Username is required
                UserAlreadyUnfollowsUser:
                  value:
                    message: User already unfollows the user
        "404":
          description: For nonexistent user
          content:
            application/json:
              example:
                examples:
                UserDoesNotExist:
                  value:
                    message: User does not exist
                UserToBeFollowedDoesNotExist:
                  value:
                    message: User to be followed does not exist
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while unfollowing the user
      x-swagger-router-controller: User
  /user/is-username-available/{username}:
    get:
      tags:
        - user
      summary: Check if username is available
      description: Check if a username is available for registration.
      operationId: isUsernameAvailable
      parameters:
        - name: username
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Username is available
          content:
            application/json:
              example:
                message: Username is available
                available: true
        "400":
          description: Bad request
          content:
            application/json:
              example:
                message: Username is required
        "409":
          description: "Username is not available"
          content:
            application/json:
              example:
                message: Username is not available
                available: false
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while checking if the username is available
      x-swagger-router-controller: User
  /user/generate-username:
    get:
      tags:
        - user
      summary: Generate a random valid username to ease the sign up process for the user.
      description: Generate a random valid username using faker.js package.
      operationId: generateUsername
      responses:
        "200":
          description: Username generated successfully
          content:
            application/json:
              example:
                message: Username generated
                username: randomUsername
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while generating the username
  /user/{username}/posts:
    get:
      tags:
        - user
      summary: Get posts created by the user with the given username
      security:
        - cookie_auth: []
      description: Retrieve paginated user posts.
      operationId: getPosts
      parameters:
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "hot or top or new"
        - name: time
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "now or today or week or month or year or all"
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: User posts retrieved successfully
          content:
            application/json:
              schema:
                message: User posts retrieved successfully
                $ref: "#/components/schemas/Feed"
        "400":
          description: Error getting user posts
          content:
            application/json:
              example:
                message: Error getting user posts
        "404":
          description: User not found
          content:
            application/json:
              examples:
                UserNotFound:
                  value:
                    message: User not found
                VisitorNotFound:
                  value:
                    message: Visitor not found
      x-swagger-router-controller: User
  /user/{username}/comments:
    get:
      tags:
        - user
      summary: Same as /user/{username}/posts but for comments
      security:
        - cookie_auth: []
      description: Retrieve paginated user comments.
      operationId: getComments
      parameters:
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "hot or top or new"
        - name: time
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "now or today or week or month or year or all"
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: User comments retrieved successfully
          content:
            application/json:
              schema:
                message: User comments retrieved successfully
                $ref: "#/components/schemas/Feed"
        "400":
          description: Error getting user comments
          content:
            application/json:
              example:
                message: Error getting user comments
        "404":
          description: User not found
          content:
            application/json:
              examples:
                UserNotFound:
                  value:
                    message: User not found
                VisitorNotFound:
                  value:
                    message: Visitor not found
      x-swagger-router-controller: User
  /user/{username}/overview:
    get:
      tags:
        - user
      summary: Retrieve user overview.
      description: Get user overview showing posts and comments posted/commented by the user
      operationId: getUserOverview
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "hot or top or new"
        - name: time
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "now or today or week or month or year or all"
      responses:
        "200":
          description: User overview retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "404":
          description: Users not found
          content:
            application/json:
              examples:
                UserNotFound:
                  value:
                    message: User not found
                VisitorNotFound:
                  value:
                    message: Visitor not found
        "400":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Error getting user overview: {error}"
      x-swagger-router-controller: User
  /user/history:
    get:
      tags:
        - user
      summary: Get the posts that the user has recently interacted to.
      security:
        - cookie_auth: []
      description: Returns a paginated feed of posts.
      operationId: getHistory
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 2
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: User history retrieved successfully
          content:
            application/json:
              schema:
                message: User history retrieved successfully
                $ref: "#/components/schemas/Feed"
        "400":
          description: Bad request
          content:
            application/json:
              example:
                message: Error getting history
        "401":
          description: Unauthorized, user must be logged in
          content:
            application/json:
              example:
                message: User must be logged in
      x-swagger-router-controller: User
    delete:
      tags:
        - user
      summary: Clear user history
      security:
        - cookie_auth: []
      description: Clear user browsing history.
      operationId: clearHistory
      responses:
        "200":
          description: User history cleared successfully
          content:
            application/json:
              example:
                message: User history cleared successfully
        "400":
          description: "Error clearing history"
        "401":
          description: "Unauthorized, user must be logged in"
        "404":
          description: User not found
      x-swagger-router-controller: User
  /user/saved:
    get:
      tags:
        - user
      summary: Get user saved posts and comments
      description: Retrieve user's saved posts and comments.
      operationId: getSaved
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      security:
        - cookie_auth: []
      responses:
        "200":
          description: User saved posts retrieved successfully
          content:
            application/json:
              schema:
                message: User saved posts retrieved successfully
                $ref: "#/components/schemas/Feed"
        "404":
          description: user not found
          content:
            application/json:
              example:
                message: user not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving the user saved posts
      x-swagger-router-controller: User
  /user/saved-posts:
    get:
      tags:
        - user
      summary: Get user saved posts excluding saved comments
      description: Retrieve user's saved posts.
      operationId: getSavedPosts
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      security:
        - cookie_auth: []
      responses:
        "200":
          description: User saved posts retrieved successfully
          content:
            application/json:
              schema:
                message: User saved posts retrieved successfully
                $ref: "#/components/schemas/Feed"
        "404":
          description: user not found
          content:
            application/json:
              example:
                message: user not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving the user saved posts
      x-swagger-router-controller: User
  /user/saved-comments:
    get:
      tags:
        - user
      summary: Get user saved comments
      description: Retrieve user's saved comments.
      operationId: getSavedComments
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      security:
        - cookie_auth: []
      responses:
        "200":
          description: User saved posts retrieved successfully
          content:
            application/json:
              schema:
                message: User saved posts retrieved successfully
                $ref: "#/components/schemas/Feed"
        "404":
          description: user not found
          content:
            application/json:
              example:
                message: user not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving the user saved posts
      x-swagger-router-controller: User
  /user/hidden-posts:
    get:
      tags:
        - user
      summary: Get user hidden posts
      description: Retrieve user's hidden posts.
      operationId: getHiddenPosts
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: User hidden posts retrieved successfully
          content:
            application/json:
              schema:
                message: User saved posts retrieved successfully
                $ref: "#/components/schemas/Feed"
        "404":
          description: user not found
          content:
            application/json:
              example:
                message: user not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving the user saved posts
      x-swagger-router-controller: User
  /user/joined-communities:
    get:
      tags:
        - user
      summary: Get user joined communities
      description: Retrieve paginated user's joined communities.
      operationId: getJoinedCommunities
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      security:
        - cookie_auth: []
      responses:
        "200":
          description: User joined communities retrieved successfully
          content:
            application/json:
              schema:
                message: User joined communities retrieved successfully
                $ref: "#/components/schemas/JoinedCommunities"
        "400":
          description: Bad request
          content:
            application/json:
              example:
                message: Error getting joined communities
        "404":
          description: User not found
          content:
            application/json:
              example:
                message: User not found
      x-swagger-router-controller: User
  /user/moderator-in:
    get:
      tags:
        - user
      summary: Retrieve subreddits that user is a moderator
      security:
        - cookie_auth: []
      description: Retrieve subreddits that user is a moderator
      operationId: getSubredditMod
      responses:
        "200":
          description: list of subreddits
          content:
            application/json:
              example:
                id: "1"
                name: Egypt
                noOfMembers: "100"
        "401":
          description: No such subreddit is found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Subreddit
  /post:
    post:
      tags:
        - post
      summary: Create post
      description: Creates a post of type Post, Link, Images & Video, or Poll. It ignores additional fields other than those required by the post type as shown in the examples.
      operationId: createPost
      requestBody:
        description: post to be created
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreatePost"
                - $ref: "#/components/schemas/CreateLink"
                - $ref: "#/components/schemas/CreateImage"
                - $ref: "#/components/schemas/CreatePoll"
            examples:
              PostExample:
                value:
                  type: "Post"
                  communityName: "funny"
                  title: "Text Post Example"
                  content: "This is a text post example."
                  isSpoiler: false
                  isNSFW: false
                  date: "2024-03-25T15:37:33.339+00:00 for scheduled posts only"
              LinkExample:
                value:
                  type: "Links"
                  communityName: "funny"
                  title: "Text Post Example"
                  content: "This is a text post example."
                  isSpoiler: false
                  isNSFW: false
                  date: "2024-03-25T15:37:33.339+00:00 for scheduled posts only"
              ImagesExample:
                value:
                  type: "Images & Video"
                  communityName: "funny"
                  title: "Text Post Example"
                  images:
                    - file: <image_file_1>
                    - file: <image_file_2>
                  isSpoiler: false
                  isNSFW: false
                  date: "2024-03-25T15:37:33.339+00:00 for scheduled posts only"
              PollExample:
                value:
                  type: "Poll"
                  communityName: "funny"
                  title: "Text Post Example"
                  content: "This is a text post example."
                  pollOptions: ["option1", "option2"]
                  expirationDate: "2024-03-25T15:37:33.339+00:00"
                  isSpoiler: false
                  isNSFW: false
                  date: "2024-03-25T15:37:33.339+00:00 for scheduled posts only"
            encoding:
              file:
                contentType: "multipart/form-data"
        required: true
      responses:
        "200":
          description: Post created successfully (while ignoring additional fields)
          content:
            application/json:
              example:
                message: Post created successfully (while ignoring additional fields)
                postId: 350651awd651awd
        "400":
          description: Missing required fields
          content:
            application/json:
              examples:
                MissingRequiredFields:
                  value:
                    message: Post type, community name, and title are required
                InvalidPostType:
                  value:
                    message: Invalid type
                MissingImages&Video:
                  value:
                    message: Images or video are required
                MaximumImagesLimit:
                  value:
                    message: Maximum of 10 images or videos
                InvalidURL:
                  value:
                    message: Invalid URL
                InvalidPollOptionsFormat:
                  value:
                    message: Poll options must be an array
                InvalidPollOptionsLength:
                  value:
                    message: Poll options must have at least 2 options
                InvalidExpirationDate:
                  value:
                    message: Invalid expiration date
                InvalidCommunity:
                  value:
                    message: Community not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error editing post
      x-swagger-router-controller: Post
  /post/{postId}:
    get:
      tags:
        - post
      summary: Get post details
      description: Retrieve information about a specific post.
      operationId: getPost
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Post data retrieved successfully
          content:
            application/json:
              schema:
                status: OK
                message: Post data retrieved successfully
                $ref: "#/components/schemas/Post"
        "401":
          description: User trying to view NSFW content
          content:
            application/json:
              example:
                message: Unable to view NSFW content
        "404":
          description: Not found
          content:
            application/json:
              examples:
                PostNotFound:
                  value:
                    message: Post does not exist
                UserNotFound:
                  value:
                    message: User does not exist
        "400":
          description: Invalid post ID that cannot be queried as it is not in the same format as a typical ObjedtID
          content:
            application/json:
              example:
                message: Post ID is wrong
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while getting post
      x-swagger-router-controller: Post
    delete:
      tags:
        - post
      summary: Delete Post
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          description: ID of post to be deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Post deleted Successfully
          content:
            application/json:
              example:
                message: Post deleted successfully
        "400":
          description: Post not found
          content:
            application/json:
              examples:
                PostNotFound:
                  value:
                    message: Post is not found
                InvalidPostId:
                  value:
                    message: Invalid post ID
        "403":
          description: You are not authorized to delete this post
          content:
            application/json:
              example:
                message: You are not authorized to delete this post
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Invalid image or video URLs found in post
      x-swagger-router-controller: Post
    patch:
      tags:
        - post
      summary: Edit post
      description: change the content of a Post or Poll type post
      operationId: editPost
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: ONLY PERMITTED FOR POST & POLL TYPES
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditPost"
        required: true
      responses:
        "200":
          description: Post edited successfully
          content:
            application/json:
              example:
                message: Post edited successfully
        "400":
          description: Post edited successfully
          content:
            application/json:
              examples:
                PostNotFound:
                  value:
                    message: Post is not found
                NoContent:
                  value:
                    message: No content to update
                InvalidPostId:
                  value:
                    message: Invalid post ID
                InvalidPostType:
                  value:
                    message: You cannot edit this post type
        "403":
          description: You are not authorized to edit this post
          content:
            application/json:
              example:
                message: You are not authorized to edit this post
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error editing post
      x-swagger-router-controller: Post
  /post/home-feed:
    get:
      tags:
        - post
      summary: Get home feed
      description: Retrieve the home feed for a user or guest sorted and paginated. For a guest, sorting will always be by best (random)
      operationId: getHomeFeed
      parameters:
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "hot or top or new or best or rising"
        - name: time
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "now or today or week or month or year or all"
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Home feed retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "404":
          description: User not found
          content:
            application/json:
              example:
                message: User does not exist
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while getting home feed
      x-swagger-router-controller: Post
  /post/{postId}/comments:
    get:
      tags:
        - post
      summary: Get comments for a specific post
      description: Gets comments under a single post sorted by sort parameter if given or by community suggested sort if sort parameter is not given and paginated
      operationId: getComments
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "best or top or new"
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "400":
          description: Invalid post ID that cannot be queried as it is not in the same format as a typical ObjedtID
          content:
            application/json:
              example:
                message: Post ID is wrong
        "404":
          description: Post not found
          content:
            application/json:
              examples:
                PostNotFound:
                  value:
                    message: Post does not exist
                UserNotFound:
                  value:
                    message: User does not exist
                CommunityNotFound:
                  value:
                    message: Community does not exist
        "401":
          description: User trying to view NSFW content
          content:
            application/json:
              example:
                message: Unable to view NSFW content
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while getting comments of post
      x-swagger-router-controller: Post
  /post/{postId}/upvote:
    patch:
      tags:
        - post
      summary: upvote a specific post
      description: specify a post to upvote. Already handles the logic if the user has already an interaction with the post
      operationId: upvotePost
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Post
          content:
            application/json:
              example:
                message: Post voted successfully
        "400":
          description: Post not found
          content:
            application/json:
              examples:
                InvalidPostId:
                  value:
                    message: Invalid post ID
                PostNotFound:
                  value:
                    message: Post does not exist
        "401":
          description: "Unauthorized, user must be logged in"
          content:
            application/json:
              example:
                message: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while upvoting the post
      x-swagger-router-controller: Post
  /post/{postId}/downvote:
    patch:
      tags:
        - post
      summary: downvote a specific post
      description: specify a post to downvote. Already handles the logic if the user has already an interaction with the post
      operationId: downvotePost
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Post
          content:
            application/json:
              example:
                message: Post voted successfully
        "400":
          description: Post not found
          content:
            application/json:
              examples:
                InvalidPostId:
                  value:
                    message: Invalid post ID
                PostNotFound:
                  value:
                    message: Post does not exist
        "401":
          description: "Unauthorized, user must be logged in"
          content:
            application/json:
              example:
                status: Unauthorized
                message: User must be logged in
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: Internal server error
                message: An error occurred while upvoting the post
      x-swagger-router-controller: Post
  /post/{postId}/vote-poll:
    patch:
      tags:
        - post
      summary: Vote on a poll
      security:
        - cookie_auth: []
      operationId: votePoll
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: vote on a poll option
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VotePoll"
        required: true
      responses:
        "200":
          description: Post voted successfully
          content:
            application/json:
              example:
                message: Post voted successfully
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                NotAPoll:
                  value:
                    message: Post is not a poll
                PollAlreadyVoted:
                  value:
                    message: User has already voted
                invalidPollOption:
                  value:
                    message: invalid poll option
                expiredPoll:
                  value:
                    message: poll has expired
                PostNotFound:
                  value:
                    message: Post does not exist
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while voting on the poll
      x-swagger-router-controller: Post
  /post/{postId}/save:
    patch:
      tags:
        - post
      summary: Save/unsave post/comment
      description: Save/unsave a post or comment by specifying the desired state in isSaved field
      security:
        - cookie_auth: []
      operationId: savePost
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: action to save/unsave post
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavePost"
      responses:
        "200":
          description: Post/comment saved/unsaved successfully
          content:
            application/json:
              example:
                message: Post/comment saved/unsaved successfully
        "400":
          description: Post not found
          content:
            application/json:
              examples:
                InvalidPostId:
                  value:
                    message: Invalid post ID
                PostNotFound:
                  value:
                    message: Post does not
                UserNotFound:
                  value:
                    message: User is not found
                PostAlreadySaved:
                  value:
                    message: Post is already saved
                PostNotSaved:
                  value:
                    message: Post is not saved
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error saving post
      x-swagger-router-controller: Post
  /post/{postId}/lock:
    patch:
      tags:
        - post
      summary: Lock post
      description: Lock/unlock a post by specifying the desired state in isLocked field
      security:
        - cookie_auth: []
      operationId: lockPost
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LockPost"
      responses:
        "200":
          description: Post lock/unlocked successfully
          content:
            application/json:
              example:
                message: Post lock changed successfully
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                MissingRequiredField:
                  value:
                    message: isLocked field is required
                InvalidPostId:
                  value:
                    message: Invalid post ID
                PostNotFound:
                  value:
                    message: Post is not found
                PostAlreadyLocked/Unlocked:
                  value:
                    message: Post is already locked/unlocked
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error saving post
      x-swagger-router-controller: Post
  /post/{postId}/hide:
    patch:
      tags:
        - post
      summary: Hide post
      description: Hide/unhide a post by specifying the desired state in isHidden field
      security:
        - cookie_auth: []
      operationId: hidePost
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Hides post object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HidePost"
      responses:
        "200":
          description: Post visibility changed successfully
          content:
            application/json:
              example:
                message: Post visibility changed successfully
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                MissingRequiredField:
                  value:
                    message: isHidden field is required
                InvalidPostId:
                  value:
                    message: Invalid post ID
                PostNotFound:
                  value:
                    message: Post is not found
                UserNotFound:
                  value:
                    message: User is not found
                PostAlreadyHidden:
                  value:
                    message: Post is already hidden
                PostNotHidden:
                  value:
                    message: Post is not hidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error hiding post
      x-swagger-router-controller: Post
  /post/{postId}/follow:
    patch:
      tags:
        - post
      summary: Follow post
      operationId: followPost
      security:
        - cookie_auth: []
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Follows post object
        content:
          application/json:
            example:
              isFollowed: true
      responses:
        "200":
          description: Post followed successfully
          content:
            application/json:
              example:
                message: Post followed successfully
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Post
  /post/{postId}/report:
    post:
      tags:
        - post
      summary: Report post
      operationId: reportPost
      security:
        - cookie_auth: []
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Reports post object
        content:
          application/json:
            example:
              communityRule: Report Mahmoud
      responses:
        "200":
          description: Post reported successfully
          content:
            application/json:
              example:
                message: Post reported successfully
        "404":
          description: Post not found
          content:
            application/json:
              examples:
                Post:
                  value:
                    message: Post not found
                Community:
                  value:
                    message: Community not found
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                Community doesn't have this rule:
                  value:
                    message: Community rule does not apply
                post need to belong to a community:
                  value:
                    message: Post does not belong to a community
                Reporting your own post:
                  value:
                    message: You cannot report your own post
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Post
  /comment:
    post:
      tags:
        - comment
      summary: comment on a specific post
      description: comment on a specific post with text or image
      operationId: createComment
      security:
        - cookie_auth: []
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: reference to post object and new content
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateTextComment"
                - $ref: "#/components/schemas/CreateImageComment"
            examples:
              TextCommentExample:
                value:
                  postId: "661333b8f5b9ff88aa7ef5a0"
                  content: "text content"
              ImageCommentExample:
                value:
                  postId: "661333b8f5b9ff88aa7ef5a0"
                  images: "<image_file>"
      responses:
        "200":
          description: Comment created successfully
          content:
            application/json:
              example:
                message: Comment created successfully
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                MissingRequiredFields:
                  value:
                    message: Post ID is required
                MissingContent:
                  value:
                    message: Comment must have content or image
                MultipleContent:
                  value:
                    message: Comment cannot have content & image at the same time
                MultipleImages:
                  value:
                    message: Comment can only have one image
                PostNotFound:
                  value:
                    message: Cannot comment on a non-existing post
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Post
  /comment/{commentId}:
    get:
      tags:
        - comment
      summary: Get comment details for one comment
      operationId: getComment
      parameters:
        - name: commentId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Comment data retrieved successfully
          content:
            application/json:
              schema:
                status: OK
                message: Post data retrieved successfully
                $ref: "#/components/schemas/Comment"
        "401":
          description: User trying to view NSFW content
          content:
            application/json:
              example:
                message: Unable to view NSFW content
        "404":
          description: Not found
          content:
            application/json:
              examples:
                PostNotFound:
                  value:
                    message: Post does not exist
                UserNotFound:
                  value:
                    message: User does not exist
                CommentNotFound:
                  value:
                    message: Comment does not exist
        "400":
          description: Invalid comment ID that cannot be queried as it is not in the same format as a typical ObjedtID
          content:
            application/json:
              example:
                message: Comment ID is wrong
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while getting comment
    x-swagger-router-controller: Post
    patch:
      tags:
        - comment
      summary: edit a specific comment'
      description: edit a specific comment with text or image (must be the same type as original comment)
      operationId: editComment
      security:
        - cookie_auth: []
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: reference to post object and new content
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/EditTextComment"
                - $ref: "#/components/schemas/EditImageComment"
            examples:
              TextCommentExample:
                value:
                  content: "text content"
              ImageCommentExample:
                value:
                  images: "<image_file>"
      responses:
        "200":
          description: Comment edited successfully
          content:
            application/json:
              example:
                message: Comment edited successfully
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                MissingImage:
                  value:
                    message: No image provided (for image comment)
                MissingText:
                  value:
                    message: No text provided (for text comment)
                MultipleImages:
                  value:
                    message: Comment can only have one image
                CommentNotFound:
                  value:
                    message: Cannot edit a non-existing comment
                CommentNotYours:
                  value:
                    message: You are not authorized to edit this comment
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Post
    delete:
      tags:
        - comment
      summary: delete a specific comment
      operationId: deleteComment
      security:
        - cookie_auth: []
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              example:
                message: Comment deleted successfully
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                CommentNotFound:
                  value:
                    message: Cannot delete a non-existing comment
                InvalidCommentId:
                  value:
                    message: Comment ID is invalid
                CommentNotYours:
                  value:
                    message: You are not authorized to delete this comment
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Post
  /subreddit:
    post:
      tags:
        - subreddit
      summary: Create community
      operationId: createSubreddit
      requestBody:
        description: Created community object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSubreddit"
        required: true
      responses:
        "201":
          description: Community created successfully
          content:
            application/json:
              example:
                message: Community created successfully
                owner: Baroudy1452
                name: theSubreddit
                isNSFW: false
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                MissingFields:
                  value:
                    message: Name and isNSFW are required
                DuplicateName:
                  value:
                    message: Community already exists
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error creating community
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}:
    get:
      tags:
        - subreddit
      summary: Get subreddit details
      description: Called when user navigates to subreddit
      operationId: getSubreddit
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Retreived subreddit details successfully
          content:
            application/json:
              example:
                name: theSubreddit
                icon: drive.creddit.com/pfp
                banner: drive.creddit.com/banner
                members: 100
                rules:
                  [
                    {
                      text: "No harassment",
                      appliesTo: "Comments only",
                      _id: "1",
                    },
                    { text: "No bala7", appliesTo: "Comments only", _id: "2" },
                  ]
                moderators: ["Baroudy1452", "Baroudy1453"]
                isModerator: false
                isMember: true
        "400":
          description: "Error getting subreddit view: Subreddit name is required"
          content:
            application/json:
              example:
                message: Subreddit not found
        "404":
          description: Subreddit not found
          content:
            application/json:
              example:
                message: Subreddit not found
      x-swagger-router-controller: Subreddit
  /subreddit/is-name-available/{name}:
    get:
      tags:
        - subreddit
      summary: Check if subreddit name is available
      description: Check if a subreddit name is available for registration.
      operationId: isNameAvailable
      parameters:
        - name: name
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Name is available
          content:
            application/json:
              example:
                message: Name is available
                available: true
        "400":
          description: Bad request
          content:
            application/json:
              example:
                message: Name is required
        "409":
          description: "Name is not available"
          content:
            application/json:
              example:
                message: Subreddit name is not available
                available: false
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while checking if the name is available
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/settings:
    get:
      tags:
        - subreddit
      summary: Get subreddit settings
      security:
        - cookie_auth: []
      description: Retrieve subreddit settings to display
      operationId: getCommunitySettings
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Subreddit settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubredditSettings"
        "400":
          description: "Error getting subreddit settings: Subreddit name is required"
          content:
            application/json:
              example:
                message: Subreddit is required
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "404":
          description: Subreddit not found in database
          content:
            application/json:
              example:
                message: Community not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Error getting settings: {error}"
      x-swagger-router-controller: Subreddit
    put:
      tags:
        - subreddit
      summary: Edit subreddit settings
      security:
        - cookie_auth: []
      description: Update subreddit settings.
      operationId: updateCommunitySettings
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: User subreddit object containing new settings
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubredditSettings"
        required: true
      responses:
        "200":
          description: Subreddit settings updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubredditSettings"
        "400":
          description: Missing required fields
          content:
            application/json:
              examples:
                SubredditIsRequired:
                  value:
                    message: Subreddit is required
                SettingsAreRequired:
                  value:
                    message: Settings are required
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "404":
          description: Subreddit not found in database
          content:
            application/json:
              example:
                message: Community not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Error updating settings: {error}"
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/rules:
    get:
      tags:
        - subreddit
      summary: Get subreddit rules
      description: Retrieve subreddit rules to display
      operationId: getCommunityRules
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Subreddit rules retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubredditRules"
        "400":
          description: "Error getting subreddit rules: Subreddit name is required"
          content:
            application/json:
              example:
                message: Subreddit is required
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "404":
          description: Subreddit not found in database
          content:
            application/json:
              example:
                message: Community not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Error getting rules: {error}"
      x-swagger-router-controller: Subreddit
    put:
      tags:
        - subreddit
      summary: Edit subreddit rules
      security:
        - cookie_auth: []
      description: Update subreddit rules.
      operationId: updateCommunityRules
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: User rules array containing all rules and in the order they should be displayed
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubredditRules"
        required: true
      responses:
        "200":
          description: Subreddit rules updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubredditRules"
        "400":
          description: Missing required fields
          content:
            application/json:
              examples:
                SubredditIsRequired:
                  value:
                    message: Subreddit is required
                SettingsAreRequired:
                  value:
                    message: Rules are required
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "404":
          description: Subreddit not found in database
          content:
            application/json:
              example:
                message: Community not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Error updating settings: {error}"
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/reported-posts:
    get:
      tags:
        - subreddit
      summary: Get reported posts
      description: Retrieve reported posts to display
      operationId: getReportedPosts
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "hot or top or new or best or rising"
        - name: type
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "All or Comment or Post"
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Reported posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "400":
          description: "Error getting reported posts: Subreddit name is required"
          content:
            application/json:
              example:
                message: Subreddit is required
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "404":
          description: Community or user not found
          content:
            application/json:
              examples:
                CommunityNotFound:
                  value:
                    message: Community not found
                UserNotFound:
                  value:
                    message: User does not exist
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "An error occurred while getting reported posts for the community"
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/scheduled-posts:
    get:
      tags:
        - subreddit
      summary: Get scheduled posts
      description: Retrieve scheduled posts of a community
      operationId: getScheduledPosts
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Scheduled posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "400":
          description: "Error getting scheduled posts: Subreddit name is required"
          content:
            application/json:
              example:
                message: Subreddit is required
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "404":
          description: Community or user not found
          content:
            application/json:
              examples:
                CommunityNotFound:
                  value:
                    message: Community not found
                UserNotFound:
                  value:
                    message: User does not exist
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "An error occurred while getting scheduled posts"
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/unmoderated-posts:
    get:
      tags:
        - subreddit
      summary: Get unmoderated posts
      description: Retrieve unmoderated posts to display
      operationId: getUnmoderatedPosts
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "new or old"
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Unmoderated posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "400":
          description: "Error getting unmoderated posts: Subreddit name is required"
          content:
            application/json:
              example:
                message: Subreddit is required
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "404":
          description: Community or user not found
          content:
            application/json:
              examples:
                CommunityNotFound:
                  value:
                    message: Community not found
                UserNotFound:
                  value:
                    message: User does not exist
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "An error occurred while getting unmoderated posts"
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/join:
    post:
      tags:
        - subreddit
      summary: Join subreddit
      description: Join a subreddit
      operationId: joinCommunity
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User joined the community successfully
          content:
            application/json:
              example:
                message: User joined the community successfully
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                message: User is already a member
        "404":
          description: Subreddit not found
          content:
            application/json:
              example:
                message: Community not found
        "500":
          description: Error joining community
      x-swagger-router-controller: Subreddit
    delete:
      tags:
        - subreddit
      summary: Leave subreddit
      description: Leave a subreddit
      operationId: leaveCommunity
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User left the community successfully
          content:
            application/json:
              example:
                message: User left the community successfully
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                message: User is not a member
        "404":
          description: Subreddit not found
          content:
            application/json:
              example:
                message: Community not found
        "500":
          description: Error leaving community
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/mute:
    post:
      tags:
        - subreddit
      summary: Mute subreddit
      description: Mute a subreddit
      operationId: muteCommunity
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User muted the community successfully
          content:
            application/json:
              example:
                message: Community muted successfully
        "404":
          description: Subreddit not found
          content:
            application/json:
              example:
                message: Community not found
        "500":
          description: Error muting community
      x-swagger-router-controller: Subreddit
    delete:
      tags:
        - subreddit
      summary: Unmute subreddit
      description: Unmute a subreddit
      operationId: muteCommunity
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User unmuted the community successfully
          content:
            application/json:
              example:
                message: Community unmuted successfully
        "404":
          description: Subreddit not found
          content:
            application/json:
              example:
                message: Community not found
        "500":
          description: Error unmuting community
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/edited:
    get:
      tags:
        - subreddit
      summary: Retrieve edited posts for a subreddit
      description: Retrieve the edited posts in this subreddit
      security:
        - cookie_auth: []
      operationId: getEditedPosts
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of edited posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "404":
          description: Bad Request
          content:
            application/json:
              example:
                message: Community not found

        "403":
          description: Bad Request
          content:
            application/json:
              example:
                message: Sorry! you are not a moderator

        "500":
          description: Internal Server Error
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/posts:
    get:
      tags:
        - subreddit
      summary: Retrieve sorted posts in a subreddit
      description: Retrieve the posts in this subreddit sorted by query parameter and paginated by limit and page parameters
      operationId: getSortedCommunityPosts
      parameters:
        - name: subreddit
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum: [new, hot, top, rising]
        - name: time
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum: [now, today, week, month, year, all]
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 10
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: list of posts sorted by selected method
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "400":
          description: Bad request
          content:
            application/json:
              example:
                message: Subreddit is required
        "404":
          description: Subreddit not found
          content:
            application/json:
              examples:
                CommunityDoesNotExist:
                  value:
                    message: Community does not exist
                UserDoesNotExist:
                  value:
                    message: User does not exist
                NoPostsFound:
                  value:
                    message: No posts found for the community
        "401":
          description: Unable to view NSFW content
          content:
            application/json:
              example:
                message: Unable to view NSFW content
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while getting posts for the community
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/muted:
    get:
      tags:
        - subreddit
      summary: Retrieve muted users
      security:
        - cookie_auth: []
      description: Retrieve muted users
      operationId: getMuted
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of Muted Users
          content:
            application/json:
              example:
                id: "1"
                pic: pic URL
                name: Baroudy1452
                moderatorSince: 1/1/2001
        "401":
          description: No such subreddit is found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/moderators:
    get:
      tags:
        - subreddit
      summary: Retrieve moderator users
      security:
        - cookie_auth: []
      description: Retrieve moderator users
      operationId: getModerators
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of moderator Subreddits
          content:
            application/json:
              example:
                id: "1"
                pic: pic URL
                name: Baroudy1452
                moderatorSince: 1/1/2001
        "401":
          description: No such subreddit is found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/reports:
    get:
      tags:
        - subreddit
      summary: Retrieve reported posts
      security:
        - cookie_auth: []
      description: Retrieve reported posts
      operationId: getReportedPosts
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of Reported Posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "401":
          description: No such subreddit is found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/spam:
    get:
      tags:
        - subreddit
      summary: Retrieve spam posts
      security:
        - cookie_auth: []
      description: Retrieve spam posts
      operationId: getSpammedPosts
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of Spam posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "401":
          description: No such subreddit is found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Subreddit
  /subreddit/{subredditName}/modqueue:
    get:
      tags:
        - subreddit
      summary: Retrieve modqueue posts
      security:
        - cookie_auth: []
      description: Retrieve modqueue posts
      operationId: getModQueuePosts
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of pending posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "401":
          description: No such subreddit is found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Subreddit
  /subreddit/{subreddit}/unmoderated:
    get:
      tags:
        - subreddit
      summary: Retrieve unmoderated posts
      security:
        - cookie_auth: []
      description: Retrieve unmoderated posts
      operationId: getUnmoderatedPosts
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of unmoderated posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feed"
        "401":
          description: No such subreddit is found
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Subreddit
  /subreddit/top:
    get:
      tags:
        - subreddit
      summary: Get top subreddits
      description: Retrieve top subreddits to display
      operationId: getTopCommunities
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Top Subreddits retrieved successfully
          content:
            application/json:
              schema:
                message: Top Subreddits retrieved successfully
                $ref: "#/components/schemas/TopCommunity"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving top subreddits
      x-swagger-router-controller: Subreddit
  /notification/all:
    get:
      tags:
        - notification
      summary: Get all notifications for a user
      security:
        - cookie_auth: []
      description: Get all notifications for a user
      operationId: getAllNotifications
      responses:
        "200":
          description: list of all notifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Notification
  /notification/mark-all-as-read:
    patch:
      tags:
        - notification
      summary: Mark all notifications as read
      security:
        - cookie_auth: []
      description: Mark all notifications as read
      operationId: markAllNotificationsAsRead
      responses:
        "200":
          description: All notifications marked as read successfully
          content:
            application/json:
              example:
                message: All notifications marked as read successfully
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Notification
  /notification:
    get:
      tags:
        - notification
      summary: Get 5 recent notifications
      security:
        - cookie_auth: []
      description: Get 5 recent notifications
      operationId: getRecentNotifications
      responses:
        "200":
          description: Recent notifications
          content:
            application/json:
              example:
                message: Recent notifications
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Notification
    post:
      tags:
        - notification
      summary: Create notification
      description: Create notification
      operationId: createNotification
      requestBody:
        description: Follow resource
        content:
          application/json:
            example:
              resourceId: awunioawd3ui5378y34iu
              userId: awunioawd3ui5378y34iu
              type: post
        required: true
      responses:
        "200":
          description: Notification created successfully
          content:
            application/json:
              example:
                message: Notification created successfully
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Notification
  /message:
    post:
      tags:
        - message
      summary: Create an email like message to a user or to the moderators of a certain subreddit
      security:
        - cookie_auth: []
      description: Create message.
      operationId: createMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
        required: true
      responses:
        "200":
          description: Message has been sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageSent"
        "400":
          description: "Error sending message"
          content:
            application/json:
              example:
                message: Error sending message
        "404":
          description: "Receiver not found"
          content:
            application/json:
              example:
                message: Receiver not found
      x-swagger-router-controller: Message
    get:
      tags:
        - message
      summary: Get all messages
      security:
        - cookie_auth: []
      description: Retrieve all messages from or to the user excluding post replies and mentions
      operationId: getMessages
      responses:
        "200":
          description: All Messsages retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inbox"
        "400":
          description: Error getting messages
          content:
            application/json:
              example:
                message: Error getting messages
        "404":
          description: "No messages found"
          content:
            application/json:
              example:
                message: No messages found
      x-swagger-router-controller: Message
  /message/inbox:
    get:
      tags:
        - message
      summary: Get messsages to the user including post replies and mentions
      security:
        - cookie_auth: []
      description: Retrieve user messages to display
      operationId: getInbox
      responses:
        "200":
          description: User Messsages retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inbox"
        "400":
          description: Error getting messages
          content:
            application/json:
              example:
                message: Error getting messages
        "404":
          description: "No messages found"
          content:
            application/json:
              example:
                message: No messages found
      x-swagger-router-controller: Message
  /message/sent:
    get:
      tags:
        - message
      summary: Get messsages from the user excluding post replies and mentions
      security:
        - cookie_auth: []
      description: Retrieve user messages to display
      operationId: getSentMessages
      responses:
        "200":
          description: User Messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inbox"
        "400":
          description: Error getting messages
          content:
            application/json:
              example:
                message: Error getting messages
        "404":
          description: "No messages found"
          content:
            application/json:
              example:
                message: No messages found
      x-swagger-router-controller: Message
  /message/post-replies:
    get:
      tags:
        - message
      summary: Get post replies to the user
      security:
        - cookie_auth: []
      description: Retrieve user messages to display
      operationId: getPostReplies
      responses:
        "200":
          description: User Messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inbox"
        "400":
          description: Error getting messages
          content:
            application/json:
              example:
                message: Error getting messages
        "404":
          description: "No messages found"
          content:
            application/json:
              example:
                message: No messages found
      x-swagger-router-controller: Message
  /message/username-mentions:
    get:
      tags:
        - message
      summary: Get mentions to the user
      security:
        - cookie_auth: []
      description: Retrieve user messages to display
      operationId: getUsernameMentions
      responses:
        "200":
          description: User Messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inbox"
        "400":
          description: Error getting messages
          content:
            application/json:
              example:
                message: Error getting messages
        "404":
          description: "No messages found"
          content:
            application/json:
              example:
                message: No messages found
      x-swagger-router-controller: Message
  /message/unread:
    get:
      tags:
        - message
      summary: Get user unread messages
      security:
        - cookie_auth: []
      description: Retrieve user unread messages to display
      operationId: getUnreadMessages
      responses:
        "200":
          description: User unread Messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inbox"
        "401":
          description: "Unauthorized, user must be logged in"
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Message
  /message/{messageId}/mark-as-read:
    patch:
      tags:
        - message
      summary: Mark a message as read
      security:
        - cookie_auth: []
      description: Mark a message as read.
      operationId: markAsRead
      parameters:
        - name: messageId
          in: path
          description: ID of the message to be marked as read
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Message has been marked as read successfully
          content:
            application/json:
              example:
                Message: Message has been marked as read successfully
        "400":
          description: Error marking message as read
          content:
            application/json:
              example:
                message: Error marking message as read
        "404":
          description: "Message not found"
          content:
            application/json:
              example:
                message: Message not found
      x-swagger-router-controller: Message
  /message/{messageId}:
    delete:
      tags:
        - message
      summary: Delete a message
      security:
        - cookie_auth: []
      description: Delete message.
      operationId: deleteMessage
      parameters:
        - name: messageId
          in: path
          description: ID of the message to be deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Message has been Deleted successfully
          content:
            application/json:
              example:
                message: Message deleted successfully
        "400":
          description: Error deleting Message
          content:
            application/json:
              example:
                message: Error deleting Message
      x-swagger-router-controller: Message
  /message/mark-all-as-read:
    post:
      tags:
        - message
      summary: Read all messages
      security:
        - cookie_auth: []
      description: Read all messages.
      operationId: markAllAsREad
      responses:
        "200":
          description: All messages have been read successfully
          content:
            application/json:
              example:
                message: All messages marked as read
        "400":
          description: Error marking messages as read
          content:
            application/json:
              example:
                message: Error marking messages as read
      x-swagger-router-controller: Message
  /mod/approve-post/{postId}:
    patch:
      tags:
        - mod
      summary: Approve a post
      security:
        - cookie_auth: []
      description: Approve a post.
      operationId: approvePost
      parameters:
        - name: postId
          in: path
          description: ID of the post to be approved
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Approve post object
        content:
          application/json:
            example:
              postId: "1"
        required: true
      responses:
        "200":
          description: post approved successfully
          content:
            application/json:
              example:
                message: post approved successfully
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Mod
  /mod/invite/{communityName}:
    post:
      tags:
        - mod
      summary: invite a moderator
      security:
        - cookie_auth: []
      description: Send a moderator invitation to a user to moderate a community by adding user to the invited list and sending a message to the user
      operationId: inviteModerator
      parameters:
        - name: communityName
          in: path
          description: name of the community to be moderated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: username to be invited
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true
      responses:
        "200":
          description: Moderator invitation sent
          content:
            application/json:
              example:
                message: Moderator invitation sent
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                UserNotFound:
                  value:
                    message: User not found
                CommunityNotFound:
                  value:
                    message: Community not found
                UserAlreadyModerator:
                  value:
                    message: User is already a moderator
                UserAlreadyInvited:
                  value:
                    message: User has already been invited
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred
      x-swagger-router-controller: Mod
  /mod/accept-invite/{communityName}:
    patch:
      tags:
        - mod
      summary: Accept moderation invite by adding user to the moderators list and removing user from the invited list
      security:
        - cookie_auth: []
      description: Accept moderation invite
      operationId: acceptInvitation
      parameters:
        - name: communityName
          in: path
          description: name of the community to be moderated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Moderator invitation accepted
          content:
            application/json:
              example:
                message: Moderator invitation accepted
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                UserNotFound:
                  value:
                    message: User not found
                CommunityNotFound:
                  value:
                    message: Community not found
                UserNotInvited:
                  value:
                    message: You have not been invited to moderate this community
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred
      x-swagger-router-controller: Mod
  /mod/reject-invite/{communityName}:
    patch:
      tags:
        - mod
      summary: reject moderation invite by removing user from the invited list
      security:
        - cookie_auth: []
      description: reject moderation invite
      operationId: rejectInvitation
      parameters:
        - name: communityName
          in: path
          description: name of the community to be moderated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Moderator invitation rejected
          content:
            application/json:
              example:
                message: Moderator invitation rejected
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                UserNotFound:
                  value:
                    message: User not found
                CommunityNotFound:
                  value:
                    message: Community not found
                UserNotInvited:
                  value:
                    message: You have not been invited to moderate this community
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred
      x-swagger-router-controller: Mod
  /mod/leave/{communityName}:
    patch:
      tags:
        - mod
      summary: Leave community moderation
      security:
        - cookie_auth: []
      description: Leave community moderation by removing user from the moderators list
      operationId: leaveModeration
      parameters:
        - name: communityName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Moderator left
          content:
            application/json:
              example:
                message: Moderator left
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                UserNotFound:
                  value:
                    message: User not found
                CommunityNotFound:
                  value:
                    message: Community not found
                UserNotModerator:
                  value:
                    message: You are not a moderator of this community
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred
      x-swagger-router-controller: Mod
  /mod/remove/{communityName}:
    patch:
      tags:
        - mod
      summary: Remove community moderator
      security:
        - cookie_auth: []
      description: remove moderator by removing user from the moderators list
      operationId: removeModerator
      parameters:
        - name: communityName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: username to be removed from moderators
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true
      responses:
        "200":
          description: Moderator removed
          content:
            application/json:
              example:
                message: Moderator left
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                UserNotFound:
                  value:
                    message: User not found
                CommunityNotFound:
                  value:
                    message: Community not found
                UserNotModerator:
                  value:
                    message: User is already not a moderator
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred
      x-swagger-router-controller: Mod
  /mod/mute/{subredditName}:
    patch:
      tags:
        - mod
      summary: mute user in community
      security:
        - cookie_auth: []
      description: mute user in community
      operationId: muteUser
      parameters:
        - name: subredditName
          in: path
          description: ID of the subreddit which the user should be muted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: community & user to be muted
        content:
          application/json:
            example:
              communityID: "1"
              userID: "1"
        required: true
      responses:
        "200":
          description: User Muted successfully
          content:
            application/json:
              example:
                message: User Muted successfully
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Mod
  /mod/unmute/{subredditName}:
    patch:
      tags:
        - mod
      summary: unmute user in community
      security:
        - cookie_auth: []
      description: unmute user in community
      operationId: unmuteUser
      parameters:
        - name: subredditName
          in: path
          description: ID of the subreddit which the user should be unmuted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: community & user to be unmuted
        content:
          application/json:
            example:
              communityID: "1"
              userID: "1"
        required: true
      responses:
        "200":
          description: User unmuted successfully
          content:
            application/json:
              example:
                message: User unmuted successfully
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Mod
  /mod/approve/{subredditName}:
    patch:
      tags:
        - mod
      summary: approve user in community
      security:
        - cookie_auth: []
      description: approve user in community
      operationId: approveUser
      parameters:
        - name: subredditName
          in: path
          description: ID of the subreddit which the user should be approved in
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: username of user to be approved
        content:
          application/json:
            example:
              username: "SlaxSplash"
        required: true
      responses:
        "200":
          description: User approved successfully
          content:
            application/json:
              example:
                message: User approved
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                CommunityNotFound:
                  value:
                    message: Community does not exist
                ModeratorNotFound:
                  value:
                    message: Moderator does not exist
                NotModertaorOfCommunity:
                  value:
                    message: You are not a moderator of this community
                UserNotFound:
                  value:
                    message: User does not exist
                UserAlreadyApproved:
                  value:
                    message: User is already approved
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "An error occurred"
      x-swagger-router-controller: Mod
  /mod/unapprove/{subredditName}:
    patch:
      tags:
        - mod
      summary: unapprove user in community
      security:
        - cookie_auth: []
      description: approve user in community
      operationId: approveUser
      parameters:
        - name: subredditName
          in: path
          description: ID of the subreddit which the user should be unapproved in
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: username of user to be unapproved
        content:
          application/json:
            example:
              username: "SlaxSplash"
        required: true
      responses:
        "200":
          description: User unapproved successfully
          content:
            application/json:
              example:
                message: User unapproved
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                CommunityNotFound:
                  value:
                    message: Community does not exist
                ModeratorNotFound:
                  value:
                    message: Moderator does not exist
                NotModertaorOfCommunity:
                  value:
                    message: You are not a moderator of this community
                UserNotFound:
                  value:
                    message: User does not exist
                UserAlreadyApproved:
                  value:
                    message: User is not approved
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "An error occurred"
      x-swagger-router-controller: Mod
  /mod/get-approved-users/{subredditName}:
    get:
      tags:
        - mod
      summary: Get approved users in community
      security:
        - cookie_auth: []
      description: Get approved users in community
      operationId: getApprovedUsers
      parameters:
        - name: subredditName
          in: path
          description: Name of the subreddit which the approved users should be retrieved from
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of approved users
          content:
            application/json:
              example:
                id: "1"
                pic: pic URL
                name: Baroudy1452
                moderatorSince: 1/1/2001
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                CommunityNotFound:
                  value:
                    message: Community does not exist
                ModeratorNotFound:
                  value:
                    message: Moderator does not exist
                NotModertaorOfCommunity:
                  value:
                    message: You are not a moderator of this community
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "An error occurred"
      x-swagger-router-controller: Mod
  /mod/ban/{subredditName}:
    patch:
      tags:
        - mod
      summary: Ban user in a community temporarily for a spcific number of days or permenantly if number of days is not specified (moderator only) 
      security:
        - cookie_auth: []
      description: Ban user in community
      operationId: banUser
      parameters:
        - name: subredditName
          in: path
          description: name of the subreddit which the user should be banned in
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: username, rule broken, moderator note, number of days to ban
        content:
          application/json:
              schema:
                $ref: "#/components/schemas/Ban"
        required: true
      responses:
        "200":
          description: User banned successfully
          content:
            application/json:
              example:
                message: User banned
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                InvalidDays:
                  value:
                    message: That number is not in the right range (1 to 999)
                CommunityNotFound:
                  value:
                    message: Community does not exist
                ModeratorNotFound:
                  value:
                    message: Moderator does not exist
                NotModertaorOfCommunity:
                  value:
                    message: You are not a moderator of this community
                UserNotFound:
                  value:
                    message: User does not exist
                ModeratorBanned:
                  value:
                    message: You cannot ban a moderator
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "An error occurred"
      x-swagger-router-controller: Mod
  /mod/unban/{subredditName}:
    patch:
      tags:
        - mod
      summary: unban user in community
      security:
        - cookie_auth: []
      description: unban user in community
      operationId: unbanUser
      parameters:
        - name: subredditName
          in: path
          description: name of the subreddit which the user should be unbanned in
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: username, rule broken, moderator note, number of days to ban
        content:
          application/json:
              schema:
                $ref: "#/components/schemas/Username"
        required: true
      responses:
        "200":
          description: User unbanned successfully
          content:
            application/json:
              example:
                message: User unbanned
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                CommunityNotFound:
                  value:
                    message: Community does not exist
                ModeratorNotFound:
                  value:
                    message: Moderator does not exist
                NotModertaorOfCommunity:
                  value:
                    message: You are not a moderator of this community
                UserNotFound:
                  value:
                    message: User does not exist
                UserAlreadyNotBanned:
                  value:
                    message: User is not banned
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "An error occurred"
      x-swagger-router-controller: Mod
  /mod/get-banned-users/{subredditName}:
    get:
      tags:
        - mod
      summary: Get list of banned users of a specific subreddit (moderator only)
      security:
        - cookie_auth: []
      description: Retrieve banned users
      operationId: getBannedUsers
      parameters:
        - name: subredditName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of Banned Users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BannedUsers"
        "400":
          description: Bad Request
          content:
            application/json:
              examples:
                CommunityNotFound:
                  value:
                    message: Community does not exist
                ModeratorNotFound:
                  value:
                    message: Moderator does not exist
                NotModertaorOfCommunity:
                  value:
                    message: You are not a moderator of this community
        "401":
          description: "Unauthorized, user must be logged in and a moderator"
          content:
            application/json:
              example:
                message: Unauthorized
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Mod
  /chat:
    post:
      tags:
        - chat
      summary: create chat group
      security:
        - cookie_auth: []
      description: create chat group
      operationId: createChatRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRoom"
        required: true
      responses:
        "200":
          description: group created successfully
          content:
            application/json:
              example:
                message: group unmuted successfully
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Chat
    get:
      tags:
        - chat
      summary: get chat groups
      security:
        - cookie_auth: []
      description: get chat groups
      operationId: getRooms
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: list of chat groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatRooms"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error getting chat rooms
      x-swagger-router-controller: Chat
  /chat/{roomId}/mark-as-read:
    patch:
      tags:
        - chat
      summary: mark chat as read
      security:
        - cookie_auth: []
      description: mark chat as read
      operationId: markAllMessagesAsRead
      parameters:
        - name: roomId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: chat marked as read successfully
          content:
            application/json:
              example:
                message: All messages marked as read
        "404":
          description: Chat room not found
          content:
            application/json:
              example:
                message: Chat room not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error marking all messages as read
      x-swagger-router-controller: Chat
  /chat/{roomId}:
    get:
      tags:
        - chat
      summary: get chat messages
      security:
        - cookie_auth: []
      description: get chat messages
      operationId: getRoomChat
      parameters:
        - name: roomId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: list of chat messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatMessages"
        "404":
          description: Chat room not found
          content:
            application/json:
              example:
                message: Chat room not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error getting chat messages
      x-swagger-router-controller: Chat
  /chat/leaveChat/{roomId}:
    delete:
      tags:
        - chat
      summary: leave chat group
      security:
        - cookie_auth: []
      description: leave chat group
      operationId: leaveChatRoom
      parameters:
        - name: roomId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User left successfully
          content:
            application/json:
              example:
                message: Left chat room successfully
        "403":
          description: User is not in the chat room
          content:
            application/json:
              example:
                message: User is not a member of this chat room
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: Error leaving chat room
      x-swagger-router-controller: Chat
  /search/comments:
    get:
      tags:
        - search
      summary: Search comments
      description: Search comments
      operationId: searchComments
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
        - name: query
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: string
            example: "Hello"
        - name: safeSearch
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "true or false"
        - name: user
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "Baroudy14"
        - name: community
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "Creddit_SW_Project"
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "hot or top or new"
        - name: time
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "now or today or week or month or year or all"
      responses:
        "200":
          description: list of comments
          content:
            application/json:
              schema:
                message: list of comments
                $ref: "#/components/schemas/SearchComment"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving comments
      x-swagger-router-controller: Search
  /search/posts:
    get:
      tags:
        - search
      summary: Search posts
      description: Search posts
      operationId: searchPosts
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
        - name: query
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: string
            example: "Hello"
        - name: safeSearch
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "true or false"
        - name: user
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "Baroudy14"
        - name: community
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "Creddit_SW_Project"
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "hot or top or new"
        - name: time
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "now or today or week or month or year or all"
      responses:
        "200":
          description: list of posts
          content:
            application/json:
              schema:
                message: list of posts
                $ref: "#/components/schemas/SearchPost"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving posts
      x-swagger-router-controller: Search
  /search/communities:
    get:
      tags:
        - search
      summary: Search communities
      description: Search communities
      operationId: searchCommunities
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
        - name: query
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: string
            example: "Hello"
        - name: safeSearch
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "true or false"
        - name: autocomplete
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "true or false"
      responses:
        "200":
          description: list of subreddits
          content:
            application/json:
              schema:
                message: list of subreddits
                $ref: "#/components/schemas/SearchCommunity"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving subreddits
      x-swagger-router-controller: Search
  /search/users:
    get:
      tags:
        - search
      summary: Search users
      description: Search users
      operationId: searchUsers
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
        - name: query
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: string
            example: "Hello"
        - name: safeSearch
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "true or false"
        - name: autocomplete
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "true or false"
      responses:
        "200":
          description: list of users
          content:
            application/json:
              schema:
                message: list of users
                $ref: "#/components/schemas/SearchUser"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving users
      x-swagger-router-controller: Search
  /search/hashtags:
    get:
      tags:
        - search
      summary: Search hashtags
      description: Search hashtags
      operationId: searchHashtags
      parameters:
        - name: page
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 5
        - name: query
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: string
            example: "Hello"
        - name: safeSearch
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "true or false"
        - name: sort
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "hot or top or new"
        - name: user
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "Baroudy14"
        - name: community
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "Creddit_SW_Project"
      responses:
        "200":
          description: list of hashtags
          content:
            application/json:
              schema:
                message: list of hashtags
                $ref: "#/components/schemas/SearchComment"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: An error occurred while retrieving hashtags
      x-swagger-router-controller: Search
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        gender:
          type: string
          example: ["Man", "Woman", "I Prefer Not To Say", "None"]
        fcmToken:
          type: string
          example: "654wad1284awd6584685"
    Overview:
      type: object
      properties:
        posts:
          type: array
          items:
            type: object
            oneOf:
              - $ref: "#/components/schemas/Feed"
      example:
        posts:
          - ""
          - ""
    Feed:
      type: array
      items:
        oneOf:
          - $ref: "#/components/schemas/Post"
          - $ref: "#/components/schemas/Post"
          - $ref: "#/components/schemas/Post"
    Logout:
      type: object
      properties:
        fcmToken:
          type: string
          example: "654wad1284awd6584685"
    UserLoginGoogle:
      type: object
      properties:
        googleToken:
          type: string
          example: "<GOOGLE_ACCESS_TOKEN>"
    UserSettings:
      type: object
      properties:
        account:
          type: object
          properties:
            email:
              type: string
              example: user@gmail.com
            gender:
              type: string
              example: Man
            google:
              type: boolean
              example: true
        profile:
          type: object
          properties:
            displayName:
              type: string
              example: "John Doe"
            about:
              type: string
              example: "I am a developer"
            socialLinks:
              type: array
              items:
                $ref: "#/components/schemas/UserSettings_preferences_socialLinks"
            avatar:
              type: string
              example: drive.creddit.com/test
            banner:
              type: string
              example: drive.creddit.com/test
            isNSFW:
              type: boolean
              example: true
            allowFollow:
              type: boolean
              example: true
            isContentVisible:
              type: boolean
              example: true
        safetyAndPrivacy:
          type: object
          properties:
            blockedUsers:
              type: array
              items:
                type: string
                example: "user1"
            mutedCommunities:
              type: array
              items:
                type: string
                example: "community1"
        feedSettings:
          type: object
          properties:
            showAdultContent:
              type: boolean
              example: true
            autoPlayMedia:
              type: boolean
              example: true
            communityThemes:
              type: boolean
              example: true
            communityContentSort:
              type: string
              enum:
                - top
                - rising
                - hot
                - new
            globalContentView:
              type: string
              enum:
                - card
                - classic
                - compact
            openNewTab:
              type: boolean
              example: true
        notifications:
          type: object
          properties:
            mentionsNotifs:
              type: boolean
              example: true
            commentsNotifs:
              type: boolean
              example: true
            postsUpvotesNotifs:
              type: boolean
              example: true
            repliesNotifs:
              type: boolean
              example: true
            newFollowersNotifs:
              type: boolean
              example: true
            postNotifs:
              type: boolean
              example: true
            cakeDayNotifs:
              type: boolean
              example: true
            modNotifs:
              type: boolean
              example: true
            moderatorInCommunities:
              type: array
              items:
                type: string
                example: "community1"
            invitationNotifs:
              type: boolean
              example: true
        email:
          type: object
          properties:
            followEmail:
              type: boolean
              example: true
            chatEmail:
              type: boolean
              example: true
    UpdateUserSettings:
      type: object
      properties:
        account:
          type: object
          properties:
            email:
              type: string
              example: user@gmail.com
            gender:
              type: string
              example: Man
            google:
              type: boolean
              example: true
        profile:
          type: object
          properties:
            displayName:
              type: string
              example: "John Doe"
            about:
              type: string
              example: "I am a developer"
            socialLinks:
              type: array
              items:
                $ref: "#/components/schemas/UserSettings_preferences_socialLinks"
            isNSFW:
              type: boolean
              example: true
            allowFollow:
              type: boolean
              example: true
            isContentVisible:
              type: boolean
              example: true
        safetyAndPrivacy:
          type: object
          properties:
            blockedUsers:
              type: array
              items:
                type: string
                example: "user1"
            mutedCommunities:
              type: array
              items:
                type: string
                example: "community1"
        feedSettings:
          type: object
          properties:
            showAdultContent:
              type: boolean
              example: true
            autoPlayMedia:
              type: boolean
              example: true
            communityThemes:
              type: boolean
              example: true
            communityContentSort:
              type: string
              enum:
                - top
                - rising
                - hot
                - new
            globalContentView:
              type: string
              enum:
                - card
                - classic
                - compact
            openNewTab:
              type: boolean
              example: true
        notifications:
          type: object
          properties:
            mentionsNotifs:
              type: boolean
              example: true
            commentsNotifs:
              type: boolean
              example: true
            postsUpvotesNotifs:
              type: boolean
              example: true
            repliesNotifs:
              type: boolean
              example: true
            newFollowersNotifs:
              type: boolean
              example: true
            postNotifs:
              type: boolean
              example: true
            cakeDayNotifs:
              type: boolean
              example: true
            modNotifs:
              type: boolean
              example: true
            moderatorInCommunities:
              type: array
              items:
                type: string
                example: "community1"
            invitationNotifs:
              type: boolean
              example: true
        email:
          type: object
          properties:
            followEmail:
              type: boolean
              example: true
            chatEmail:
              type: boolean
              example: true
        avatar:
          type: string
          example: drive.creddit.com/test
        banner:
          type: string
          example: drive.creddit.com/test
    ForgotPassword:
      type: object
      properties:
        info:
          type: string
          example: theUser
    ChangePassword:
      type: object
      properties:
        oldPassword:
          type: string
          example: akaAKA12345
        newPassword:
          type: string
          example: ABCa123456
        confirmPassword:
          type: string
          example: ABCa123456
    ForgotUsername:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
    ChangeEmail:
      type: object
      properties:
        password:
          type: string
          example: Abc123
        newEmail:
          type: string
          example: john@email.com
    ResetPassword:
      type: object
      properties:
        password:
          type: string
          example: Abc123
        confirmPassword:
          type: string
          example: Xyz789
    UserLogin:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: "12345"
        fcmToken:
          type: string
          example: "654wad1284awd6584685"
    UserSettings_preferences_socialLinks:
      type: object
      properties:
        platform:
          type: string
          example: twitter
        displayName:
          type: string
          example: El twitter bta3y
        url:
          type: string
          example: https://twitter.com/faUwUsa
      example:
        displayName: El twitter bta3y
        platform: twitter
        url: https://twitter.com/faUwUsa
    UserSettings_preferences:
      type: object
      properties:
        showAdultContent:
          type: boolean
          example: true
        autoPlayMedia:
          type: boolean
          example: true
        communityThemes:
          type: boolean
          example: true
        communityContentSort:
          type: string
          enum:
            - top
            - rising
            - hot
            - new
        globalContentView:
          type: string
          enum:
            - card
            - classic
            - compact
        darkMode:
          type: boolean
          example: true
        openNewTab:
          type: boolean
          example: true
        google:
          type: string
          example: jondoe@gmail.com
        apple:
          type: string
          example: apple id
        twitter:
          type: string
          example: twitter handle
        socialLinks:
          type: array
          items:
            $ref: "#/components/schemas/UserSettings_preferences_socialLinks"
        inboxMessagesNotif:
          type: boolean
          example: true
        chatMessagesNotif:
          type: boolean
          example: true
        chatRequests:
          type: boolean
          example: true
        mentionsNotif:
          type: boolean
          example: true
        commentsNotif:
          type: boolean
          example: true
        upvotesNotif:
          type: boolean
          example: true
        repliesNotif:
          type: boolean
          example: true
        newFollowerNotif:
          type: boolean
          example: true
        cakeDayNotif:
          type: boolean
          example: true
        modNotif:
          type: boolean
          example: true
        invitationNotif:
          type: boolean
          example: true
        followEmail:
          type: boolean
          example: true
        chatEmail:
          type: boolean
          example: true
        allowFollow:
          type: boolean
          example: true
        isContentVisible:
          type: boolean
          example: true
        isActiveCommunityVisible:
          type: boolean
          example: true
      example:
        socialLinks:
          - displayName: El twitter bta3y
            platform: twitter
            url: https://twitter.com/faUwUsa
          - displayName: El twitter bta3y
            platform: twitter
            url: https://twitter.com/faUwUsa
        inboxMessagesNotif: true
        repliesNotif: true
        communityContentSort: top
        apple: apple id
        openNewTab: true
        twitter: twitter handle
        followEmail: true
        modNotif: true
        upvotesNotif: true
        cakeDayNotif: true
        isActiveCommunityVisible: true
        communityThemes: true
        chatMessagesNotif: true
        globalContentView: card
        chatRequests: true
        showAdultContent: true
        isContentVisible: true
        google: jondoe@gmail.com
        mentionsNotif: true
        newFollowerNotif: true
        invitationNotif: true
        commentsNotif: true
        autoPlayMedia: true
        allowFollow: true
        darkMode: true
        chatEmail: true
    JoinedCommunities:
      type: array
      items:
        type: object
        properties:
          communityName:
            type: string
            example: cReddit_SW_Project
          profilePicture:
            type: string
            example: drive.creddit.com/test
          members:
            type: integer
            example: 100
    SinglePost:
      type: object
      properties:
        postId:
          type: string
          example: 350651awd651awd
        ownerId:
          type: string
          example: 350651awd651awd
        communityId:
          type: string
          example: 350651awd651awd
        communityProfilePicture:
          type: string
          example: drive.creddit.com/test
        ownerProfilePicture:
          type: string
          example: drive.creddit.com/test
        uploadDate:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        title:
          type: string
          example: Hello World
        content:
          type: string
          example: This is my content
        comments:
          type: integer
          example: 50
        upvotes:
          type: integer
          example: 1500
        downvotes:
          type: integer
          example: 100
        isUpvoted:
          type: boolean
          example: true
        isDownvoted:
          type: boolean
          example: false
        isNSFW:
          type: boolean
          example: false
        isSpoiler:
          type: boolean
          example: false
        children:
          type: object
    CreatePost:
      type: object
      properties:
        type:
          type: string
          example: Post
        communityName:
          type: string
          example: cReddit_SW_Project
        title:
          type: string
          example: Hello World
        content:
          type: string
          example: This is my content
        isSpoiler:
          type: boolean
          example: false
        isNSFW:
          type: boolean
          example: false
        date:
          type: string
          example: 2024-03-25T15:37:33.339+00:00 (in case of a scheduled post)
    CreateImage:
      type: object
      properties:
        type:
          type: string
          example: Post
        communityName:
          type: string
          example: cReddit_SW_Project
        title:
          type: string
          example: Hello World
        images:
          type: string
          format: binary
        isSpoiler:
          type: boolean
          example: false
        isNSFW:
          type: boolean
          example: false
        date:
          type: string
          example: 2024-03-25T15:37:33.339+00:00 (in case of a scheduled post)
    CreateLink:
      type: object
      properties:
        type:
          type: string
          example: Post
        communityName:
          type: string
          example: cReddit_SW_Project
        title:
          type: string
          example: Hello World
        content:
          type: string
          example: http://www.google.com
        isSpoiler:
          type: boolean
          example: false
        isNSFW:
          type: boolean
          example: false
        date:
          type: string
          example: 2024-03-25T15:37:33.339+00:00 (in case of a scheduled post)
    CreatePoll:
      type: object
      properties:
        type:
          type: string
          example: Post
        communityName:
          type: string
          example: cReddit_SW_Project
        title:
          type: string
          example: Hello World
        content:
          type: string
          example: This is my content
        pollOptions:
          type: array
          items:
            type: string
            example: Option 1, Option 2, Option 3
        expirationDate:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        isSpoiler:
          type: boolean
          example: false
        isNSFW:
          type: boolean
          example: false
        date:
          type: string
          example: 2024-03-25T15:37:33.339+00:00 (in case of a scheduled post)
    SavePost:
      type: object
      properties:
        isSaved:
          type: boolean
          example: true
    HidePost:
      type: object
      properties:
        isHidden:
          type: boolean
          example: true
    LockPost:
      type: object
      properties:
        isLocked:
          type: boolean
          example: true
    Post:
      type: object
      properties:
        _id:
          type: string
          example: 350651awd651awd
        postID:
          type: string
          example: 350651awd651awd (in case of Comment)
        type:
          type: string
          example: "(Images & Video) or (Post) or (Poll) or (Links)"
        isImage:
          type: string
          example: true (only if type is Comment)
        username:
          type: string
          example: Sayed
        communityName:
          type: string
          example: Watermelon
        profilePicture:
          type: string
          example: drive.creddit.com/subreddit_or_user_pfpe
        netVote:
          type: integer
          example: 1500
        commentCount:
          type: integer
          example: 50
        isSpoiler:
          type: boolean
          example: false
        isNSFW:
          type: boolean
          example: false
        isApproved:
          type: boolean
          example: false
        isLocked:
          type: boolean
          example: false
        isEdited:
          type: boolean
          example: false
        title:
          type: string
          example: Hello World
        content:
          type: string
          example: This is my content
        pollOptions:
          type: array
          items:
            type: object
            properties:
              option:
                type: string
                example: Option 1
              isVoted:
                type: boolean
                example: false
              votes:
                type: integer
                example: 10
        reports:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
                example: Sayed
              profilePicture:
                type: string
                example: drive.creddit.com/user_pfp
              reason:
                type: string
                example: Spam
        isDeletedUser:
          type: boolean
          example: false
        isBlocked:
          type: boolean
          example: false
        expirationDate:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        createdAt:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        updatedAt:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        isUpvoted:
          type: boolean
          example: false
        isDownvoted:
          type: boolean
          example: false
        isSaved:
          type: boolean
          example: false
        isHidden:
          type: boolean
          example: false
        isJoined:
          type: boolean
          example: false (not for posts in a subreddit)
        isModerator:
          type: boolean
          example: false (not for posts in a subreddit)
        child:
          type: object
          example: like any post (in case of a cross post)
        views:
          type: integer
          example: 100 (integer) used for user overview only
        upvotes:
          type: integer
          example: 1500 (integer) used for user overview only
        downvotes:
          type: integer
          example: 100 (integer) used for user overview only
    Comment:
      type: object
      properties:
        _id:
          type: string
          example: 350651awd651awd
        postID:
          type: string
          example: 350651awd651awd
        type:
          type: string
          example: "Comment"
        isImage:
          type: string
          example: true
        username:
          type: string
          example: Sayed
        communityName:
          type: string
          example: Watermelon
        profilePicture:
          type: string
          example: drive.creddit.com/subreddit_or_user_pfpe
        netVote:
          type: integer
          example: 1500
        isSpoiler:
          type: boolean
          example: false
        isNSFW:
          type: boolean
          example: false
        isApproved:
          type: boolean
          example: false
        isLocked:
          type: boolean
          example: false
        isEdited:
          type: boolean
          example: false
        title:
          type: string
          example: Hello World
        content:
          type: string
          example: This is my content
        reports:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
                example: Sayed
              profilePicture:
                type: string
                example: drive.creddit.com/user_pfp
              reason:
                type: string
                example: Spam
        isDeletedUser:
          type: boolean
          example: false
        isBlocked:
          type: boolean
          example: false
        expirationDate:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        createdAt:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        updatedAt:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        isUpvoted:
          type: boolean
          example: false
        isDownvoted:
          type: boolean
          example: false
        isSaved:
          type: boolean
          example: false
        isHidden:
          type: boolean
          example: false
        isJoined:
          type: boolean
          example: false (not for posts in a subreddit)
        isModerator:
          type: boolean
          example: false (not for posts in a subreddit)
        child:
          type: object
          example: like any post (in case of a cross post)
    EditPost:
      type: object
      properties:
        content:
          type: string
          example: This is my content
        isNSFW:
          type: boolean
          example: false
        isSpoiler:
          type: boolean
          example: false
        date:
          type: string
          example: 2024-03-25T15:37:33.339+00:00 (in case of a scheduled post)
    Community:
      type: object
      properties:
        owner:
          type: string
          example: Logan
        name:
          type: string
          example: r/cReddit_SW_Project
        icon:
          type: string
          example: drive.creddit.com/test
        topic:
          type: string
          example: Lorem ipsum
        isNSFW:
          type: boolean
          example: false
        banner:
          type: string
          example: drive.creddit.com/test
        members:
          type: integer
          example: 1000
        suggestedSort:
          type: string
          example: Best
        bannedUsers:
          type: array
          items:
            type: string
            example: '["user 1","user 2","user 3"]'
        mutedUsers:
          type: array
          items:
            type: string
            example: '["user 1","user 2","user 3"]'
        rules:
          type: array
          items:
            type: string
            example: '["Rule 1","Rule 2","Rule 3"]'
        moderators:
          type: array
          items:
            type: string
            example: '["SlaxSplash","Baroudy 14","No_Animator_8210"]'
    TopCommunity:
      type: object
      properties:
        id:
          type: string
          example: b6d05ee98b5ebd57c546bbc1
        owner:
          type: string
          example: Logan
        name:
          type: string
          example: r/cReddit_SW_Project
        icon:
          type: string
          example: drive.creddit.com/test
        topic:
          type: string
          example: Lorem ipsum
        description:
          type: string
          example: once upon a time an Engineering student wanted to live
        isJoined:
          type: boolean
          example: false
        members:
          type: integer
          example: 1000
    SubredditSettings:
      type: object
      properties:
        allowedPostTypes:
          type: string
          enum:
            - Any
            - Posts
            - Links
          example: Posts
        allowCrossPosting:
          type: boolean
          example: true
        allowSpoiler:
          type: boolean
          example: true
        allowImages:
          type: boolean
          example: true
        allowPolls:
          type: boolean
          example: true
        suggestedSort:
          type: string
          enum:
            - best
            - old
            - new
            - top
          example: best
        allowImageComments:
          type: boolean
          example: true
    SubredditRules:
      type: object
      properties:
        text:
          type: string
          example: Curse words are not allowed
        appliesTo:
          type: string
          enum:
            - Posts & comments
            - Posts only
            - Comments only
          example: Posts & comments
    Notification:
      type: object
      properties:
        id:
          type: string
          example: sjdshfjsVNJNSDJv
        userId:
          type: string
          example: asnfjsvjknsdjkvnjdsnvj
        resourceId:
          type: string
          example: asnfjsvjknsdjkvnjdsnvj
        type:
          type: string
          enum:
            - message
            - post
            - user
        isRead:
          type: boolean
          example: true
      example:
        resourceId: asnfjsvjknsdjkvnjdsnvj
        isRead: true
        id: sjdshfjsVNJNSDJv
        type: message
        userId: asnfjsvjknsdjkvnjdsnvj
    Message:
      type: object
      properties:
        to:
          type: string
          example: Silver_Flamingo
        subject:
          type: string
          example: LIFE
        text:
          type: string
          example: Everything is gonna be great :)
      example:
        subject: LIFE
        to: Silver_Flamingo
        text: Everything is gonna be great :)
    MessageSent:
      type: object
      properties:
        message:
          type: string
          example: Message sent
        messageID:
          type: string
          example: 661333b8f5b9ff88aa7ef5a0
    Inbox:
      type: object
      properties:
        from:
          type: string
          example: Team Backend
        to:
          type: string
          example: Silver_Flamingo
        subject:
          type: string
          example: LIFE
        text:
          type: string
          example: El API sha8al :)
        isRead:
          type: boolean
          example: true
        isDeleted:
          type: boolean
          example: false
        createdAt:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        updatedAt:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
    message_unread_body:
      required:
        - messageID
      type: object
      properties:
        messageID:
          type: string
          description: The ID of the message to be marked as unread
    messageId_report_body:
      required:
        - messageID
      type: object
      properties:
        messageID:
          type: string
          description: The ID of the message to be reported
    Post_pollVotes:
      type: object
      properties:
        option1:
          type: integer
          example: 10
        option2:
          type: integer
          example: 10
        option3:
          type: integer
          example: 40
      example:
        option3: 40
        option1: 10
        option2: 20
    SubredditSettings_rules:
      type: object
      properties:
        rule:
          type: string
          example: Mahmoud
        appliesTo:
          type: string
          example: Posts & comments
      example:
        rule: Mahmoud
        appliesTo: Posts & comments
    CreateSubreddit:
      type: object
      properties:
        name:
          type: string
          example: theSubreddit
        isNSFW:
          type: boolean
          example: false
    VotePoll:
      type: object
      properties:
        pollOption:
          type: string
          example: option 1
    CreateTextComment:
      type: object
      properties:
        postId:
          type: string
          example: 661333b8f5b9ff88aa7ef5a0
        content:
          type: string
          example: "text content"
    CreateImageComment:
      type: object
      properties:
        postId:
          type: string
          example: 661333b8f5b9ff88aa7ef5a0
        images:
          type: string
          example: "<image_file>"
    EditTextComment:
      type: object
      properties:
        content:
          type: string
          example: "text content"
    EditImageComment:
      type: object
      properties:
        images:
          type: string
          example: "<image_file>"
    SearchPost:
      type: object
      properties:
        _id:
          type: string
          example: 350651awd651awd
        type:
          type: string
          example: "(Images & Video) or (Post) or (Poll) or (Link)"
        title:
          type: string
          example: Hello World
        username:
          type: string
          example: Sayed
        profilePicture:
          type: string
          example: drive.creddit.com/subreddit_or_user_pfpe
        communityName:
          type: string
          example: Watermelon
        createdAt:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        netVote:
          type: integer
          example: 1500
        commentCount:
          type: integer
          example: 50
        content:
          type: string
          example: This is my content
        isNsfw:
          type: boolean
          example: false
        isSpoiler:
          type: boolean
          example: false
    SearchComment:
      type: object
      properties:
        _id:
          type: string
          example: 350651awd651awd
        postID:
          type: string
          example: 350651awd651awd
        postTitle:
          type: string
          example: Hello World
        postUsername:
          type: string
          example: Sayed
        postVotes:
          type: integer
          example: 1500
        postPicture:
          type: string
          example: drive.creddit.com/subreddit_or_user_pfpe
        postCreatedAt:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        isPostNsfw:
          type: boolean
          example: false
        isPostSpoiler:
          type: boolean
          example: false
        communityName:
          type: string
          example: Watermelon
        createdAt:
          type: string
          example: "2024-03-25T15:37:33.339+00:00"
        username:
          type: string
          example: Sayed
        netVote:
          type: integer
          example: 1500
        commentCount:
          type: integer
          example: 50
        commentPicture:
          type: string
          example: drive.creddit.com/subreddit_or_user_pfpe
        content:
          type: string
          example: This is my content
    SearchCommunity:
      type: object
      properties:
        _id:
          type: string
          example: 350651awd651awd
        name:
          type: string
          example: Watermelon
        description:
          type: string
          example: Lorem ipsum
        icon:
          type: string
          example: drive.creddit.com/test
        isNSFW:
          type: boolean
          example: false
        members:
          type: integer
          example: 1000
    SearchUser:
      properties:
        _id:
          type: string
          example: 350651awd651awd
        username:
          type: string
          example: Sayed
        about:
          type: string
          example: This is my content
        profilePicture:
          type: string
          example: drive.creddit.com/user_pfpe
        isNSFW:
          type: boolean
          example: false
    Username:
      type: object
      properties:
        username:
          type: string
          example: theUser
    ChatRoom:
      type: object
      properties:
        name:
          type: string
          example: Test (in case of group chat only)
        members:
          type: array
          items:
            type: string
            example: '["user1","user2","user3"]'
    ChatRooms:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 350651awd651awd
          name:
            type: string
            example: Test (in case of group chat only)
          members:
            type: array
            items:
              type: string
              example: '["user1","user2","user3"]'
          host:
            type: string
            example: user1 (null if private chat)
          isDeleted:
            type: boolean
            example: false
          createdAt:
            type: string
            example: "2024-03-25T15:37:33.339+00:00"
          updatedAt:
            type: string
            example: "2024-03-25T15:37:33.339+00:00"
          lastSentMessage:
            type: object
            properties:
              _id:
                type: string
                example: 350651awd651awd
              user:
                type: string
                example: user1
              room:
                type: string
                example: 350651awd651awd
              content:
                type: string
                example: Hello World
              isRead:
                type: boolean
                example: true
              isDeleted:
                type: boolean
                example: false
              reactions:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                      example: user1
                    reaction:
                      type: string
                      example: 😂
              createdAt:
                type: string
                example: "2024-03-25T15:37:33.339+00:00"
              updatedAt:
                type: string
                example: "2024-03-25T15:37:33.339+00:00"
    ChatMessages:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 350651awd651awd
          username:
            type: string
            example: user1
          profilePicture:
            type: string
            example: drive.creddit.com/user_pfpe
          room:
            type: string
            example: 350651awd651awd
          content:
            type: string
            example: Hello World
          isRead:
            type: boolean
            example: true
          isDeleted:
            type: boolean
            example: false
          reactions:
            type: array
            items:
              type: object
              properties:
                user:
                  type: string
                  example: user1
                reaction:
                  type: string
                  example: 😂
          createdAt:
            type: string
            example: "2024-03-25T15:37:33.339+00:00"
          updatedAt:
            type: string
            example: "2024-03-25T15:37:33.339+00:00"
    BannedUsers:
      type: object
      properties:
        bannedUsers:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
                example: theUser
              profilePicture:
                type: string
                example: drive.creddit.com/user_pfpe
              reasonToBan:
                type: string
                example: rule 1
              modNote:
                type: string
                example: This user is a spammer
    Ban:
      type: object
      properties:
        username:
          type: string
          example: theUser
        reason:
          type: string
          example: rule 1
        modNote:
          type: string
          example: This user is a spammer
        days:
          type: integer
          example: 7
  securitySchemes:
    cookie_auth:
      type: apiKey
      description: |
        Use HTTP-only cookies to manage authentication. 
        Access and refresh tokens are stored in cookies. 
        The refresh token is only sent when the endpoint `/user/refresh` is called.
        ```
        access_token=<access_token_value>; refresh_token=<refresh_token_value>
        ```
      name: Cookie
      in: cookie
